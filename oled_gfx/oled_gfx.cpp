#include <stdio.h>
#include <string.h>
#include "esp_system.h"
#include "kidbright32.h"
#include "oled_GFX.h"

const uint8_t font_5x7[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, // starting a 0x20 (space)
  0x00, 0x07, 0x00, 0x07, 0x00, 0x14, 0x7F, 0x14, 0x7F, 0x14, 
  0x24, 0x2A, 0x7F, 0x2A, 0x12, 0x23, 0x13, 0x08, 0x64, 0x62, 
  0x36, 0x49, 0x56, 0x20, 0x50, 0x00, 0x08, 0x07, 0x03, 0x00, 
  0x00, 0x1C, 0x22, 0x41, 0x00, 0x00, 0x41, 0x22, 0x1C, 0x00, 
  0x2A, 0x1C, 0x7F, 0x1C, 0x2A, 0x08, 0x08, 0x3E, 0x08, 0x08, 
  0x00, 0x80, 0x70, 0x30, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 
  0x00, 0x00, 0x60, 0x60, 0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 
  0x3E, 0x51, 0x49, 0x45, 0x3E, 0x00, 0x42, 0x7F, 0x40, 0x00, 
  0x72, 0x49, 0x49, 0x49, 0x46, 0x21, 0x41, 0x49, 0x4D, 0x33, 
  0x18, 0x14, 0x12, 0x7F, 0x10, 0x27, 0x45, 0x45, 0x45, 0x39, 
  0x3C, 0x4A, 0x49, 0x49, 0x31, 0x41, 0x21, 0x11, 0x09, 0x07, 
  0x36, 0x49, 0x49, 0x49, 0x36, 0x46, 0x49, 0x49, 0x29, 0x1E, 
  0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x40, 0x34, 0x00, 0x00, 
  0x00, 0x08, 0x14, 0x22, 0x41, 0x14, 0x14, 0x14, 0x14, 0x14, 
  0x00, 0x41, 0x22, 0x14, 0x08, 0x02, 0x01, 0x59, 0x09, 0x06, 
  0x3E, 0x41, 0x5D, 0x59, 0x4E, 0x7C, 0x12, 0x11, 0x12, 0x7C, 
  0x7F, 0x49, 0x49, 0x49, 0x36, 0x3E, 0x41, 0x41, 0x41, 0x22, 
  0x7F, 0x41, 0x41, 0x41, 0x3E, 0x7F, 0x49, 0x49, 0x49, 0x41, 
  0x7F, 0x09, 0x09, 0x09, 0x01, 0x3E, 0x41, 0x41, 0x51, 0x73, 
  0x7F, 0x08, 0x08, 0x08, 0x7F, 0x00, 0x41, 0x7F, 0x41, 0x00, 
  0x20, 0x40, 0x41, 0x3F, 0x01, 0x7F, 0x08, 0x14, 0x22, 0x41, 
  0x7F, 0x40, 0x40, 0x40, 0x40, 0x7F, 0x02, 0x1C, 0x02, 0x7F, 
  0x7F, 0x04, 0x08, 0x10, 0x7F, 0x3E, 0x41, 0x41, 0x41, 0x3E, 
  0x7F, 0x09, 0x09, 0x09, 0x06, 0x3E, 0x41, 0x51, 0x21, 0x5E, 
  0x7F, 0x09, 0x19, 0x29, 0x46, 0x26, 0x49, 0x49, 0x49, 0x32, 
  0x03, 0x01, 0x7F, 0x01, 0x03, 0x3F, 0x40, 0x40, 0x40, 0x3F, 
  0x1F, 0x20, 0x40, 0x20, 0x1F, 0x3F, 0x40, 0x38, 0x40, 0x3F, 
  0x63, 0x14, 0x08, 0x14, 0x63, 0x03, 0x04, 0x78, 0x04, 0x03, 
  0x61, 0x59, 0x49, 0x4D, 0x43, 0x00, 0x7F, 0x41, 0x41, 0x41, 
  0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x41, 0x41, 0x41, 0x7F, 
  0x04, 0x02, 0x01, 0x02, 0x04, 0x40, 0x40, 0x40, 0x40, 0x40, 
  0x00, 0x03, 0x07, 0x08, 0x00, 0x20, 0x54, 0x54, 0x78, 0x40, 
  0x7F, 0x28, 0x44, 0x44, 0x38, 0x38, 0x44, 0x44, 0x44, 0x28, 
  0x38, 0x44, 0x44, 0x28, 0x7F, 0x38, 0x54, 0x54, 0x54, 0x18, 
  0x00, 0x08, 0x7E, 0x09, 0x02, 0x18, 0xA4, 0xA4, 0x9C, 0x78, 
  0x7F, 0x08, 0x04, 0x04, 0x78, 0x00, 0x44, 0x7D, 0x40, 0x00, 
  0x20, 0x40, 0x40, 0x3D, 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00, 
  0x00, 0x41, 0x7F, 0x40, 0x00, 0x7C, 0x04, 0x78, 0x04, 0x78, 
  0x7C, 0x08, 0x04, 0x04, 0x78, 0x38, 0x44, 0x44, 0x44, 0x38, 
  0xFC, 0x18, 0x24, 0x24, 0x18, 0x18, 0x24, 0x24, 0x18, 0xFC, 
  0x7C, 0x08, 0x04, 0x04, 0x08, 0x48, 0x54, 0x54, 0x54, 0x24, 
  0x04, 0x04, 0x3F, 0x44, 0x24, 0x3C, 0x40, 0x40, 0x20, 0x7C, 
  0x1C, 0x20, 0x40, 0x20, 0x1C, 0x3C, 0x40, 0x30, 0x40, 0x3C, 
  0x44, 0x28, 0x10, 0x28, 0x44, 0x4C, 0x90, 0x90, 0x90, 0x7C, 
  0x44, 0x64, 0x54, 0x4C, 0x44, 0x00, 0x08, 0x36, 0x41, 0x00, 
  0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x41, 0x36, 0x08, 0x00, 
  0x02, 0x01, 0x02, 0x04, 0x02, 0x3C, 0x26, 0x23, 0x26, 0x3C, 
  0x1E, 0xA1, 0xA1, 0x61, 0x12, 0x3A, 0x40, 0x40, 0x20, 0x7A, 
  0x38, 0x54, 0x54, 0x55, 0x59, 0x21, 0x55, 0x55, 0x79, 0x41, 
  0x21, 0x54, 0x54, 0x78, 0x41, 0x21, 0x55, 0x54, 0x78, 0x40, 
  0x20, 0x54, 0x55, 0x79, 0x40, 0x0C, 0x1E, 0x52, 0x72, 0x12, 
  0x39, 0x55, 0x55, 0x55, 0x59, 0x39, 0x54, 0x54, 0x54, 0x59, 
  0x39, 0x55, 0x54, 0x54, 0x58, 0x00, 0x00, 0x45, 0x7C, 0x41, 
  0x00, 0x02, 0x45, 0x7D, 0x42, 0x00, 0x01, 0x45, 0x7C, 0x40, 
  0xF0, 0x29, 0x24, 0x29, 0xF0, 0xF0, 0x28, 0x25, 0x28, 0xF0, 
  0x7C, 0x54, 0x55, 0x45, 0x00, 0x20, 0x54, 0x54, 0x7C, 0x54, 
  0x7C, 0x0A, 0x09, 0x7F, 0x49, 0x32, 0x49, 0x49, 0x49, 0x32, 
  0x32, 0x48, 0x48, 0x48, 0x32, 0x32, 0x4A, 0x48, 0x48, 0x30, 
  0x3A, 0x41, 0x41, 0x21, 0x7A, 0x3A, 0x42, 0x40, 0x20, 0x78, 
  0x00, 0x9D, 0xA0, 0xA0, 0x7D, 0x39, 0x44, 0x44, 0x44, 0x39, 
  0x3D, 0x40, 0x40, 0x40, 0x3D, 0x3C, 0x24, 0xFF, 0x24, 0x24, 
  0x48, 0x7E, 0x49, 0x43, 0x66, 0x2B, 0x2F, 0xFC, 0x2F, 0x2B, 
  0xFF, 0x09, 0x29, 0xF6, 0x20, 0xC0, 0x88, 0x7E, 0x09, 0x03, 
  0x20, 0x54, 0x54, 0x79, 0x41, 0x00, 0x00, 0x44, 0x7D, 0x41, 
  0x30, 0x48, 0x48, 0x4A, 0x32, 0x38, 0x40, 0x40, 0x22, 0x7A, 
  0x00, 0x7A, 0x0A, 0x0A, 0x72, 0x7D, 0x0D, 0x19, 0x31, 0x7D, 
  0x26, 0x29, 0x29, 0x2F, 0x28, 0x26, 0x29, 0x29, 0x29, 0x26, 
  0x30, 0x48, 0x4D, 0x40, 0x20, 0x38, 0x08, 0x08, 0x08, 0x08, 
  0x08, 0x08, 0x08, 0x08, 0x38, 0x2F, 0x10, 0xC8, 0xAC, 0xBA, 
  0x2F, 0x10, 0x28, 0x34, 0xFA, 0x00, 0x00, 0x7B, 0x00, 0x00, 
  0x08, 0x14, 0x2A, 0x14, 0x22, 0x22, 0x14, 0x2A, 0x14, 0x08, 
  0xAA, 0x00, 0x55, 0x00, 0xAA, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 
  0x00, 0x00, 0x00, 0xFF, 0x00, 0x10, 0x10, 0x10, 0xFF, 0x00, 
  0x14, 0x14, 0x14, 0xFF, 0x00, 0x10, 0x10, 0xFF, 0x00, 0xFF, 
  0x10, 0x10, 0xF0, 0x10, 0xF0, 0x14, 0x14, 0x14, 0xFC, 0x00, 
  0x14, 0x14, 0xF7, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0xFF, 
  0x14, 0x14, 0xF4, 0x04, 0xFC, 0x14, 0x14, 0x17, 0x10, 0x1F, 
  0x10, 0x10, 0x1F, 0x10, 0x1F, 0x14, 0x14, 0x14, 0x1F, 0x00, 
  0x10, 0x10, 0x10, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x10, 
  0x10, 0x10, 0x10, 0x1F, 0x10, 0x10, 0x10, 0x10, 0xF0, 0x10, 
  0x00, 0x00, 0x00, 0xFF, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 
  0x10, 0x10, 0x10, 0xFF, 0x10, 0x00, 0x00, 0x00, 0xFF, 0x14, 
  0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x1F, 0x10, 0x17, 
  0x00, 0x00, 0xFC, 0x04, 0xF4, 0x14, 0x14, 0x17, 0x10, 0x17, 
  0x14, 0x14, 0xF4, 0x04, 0xF4, 0x00, 0x00, 0xFF, 0x00, 0xF7, 
  0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0xF7, 0x00, 0xF7, 
  0x14, 0x14, 0x14, 0x17, 0x14, 0x10, 0x10, 0x1F, 0x10, 0x1F, 
  0x14, 0x14, 0x14, 0xF4, 0x14, 0x10, 0x10, 0xF0, 0x10, 0xF0,
  0x00, 0x00, 0x1F, 0x10, 0x1F, 0x00, 0x00, 0x00, 0x1F, 0x14, 
  0x00, 0x00, 0x00, 0xFC, 0x14, 0x00, 0x00, 0xF0, 0x10, 0xF0, 
  0x10, 0x10, 0xFF, 0x10, 0xFF, 0x14, 0x14, 0x14, 0xFF, 0x14, 
  0x10, 0x10, 0x10, 0x1F, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x10, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 
  0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 
  0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x38, 0x44, 0x44, 0x38, 0x44, 
  0x7C, 0x2A, 0x2A, 0x3E, 0x14, 0x7E, 0x02, 0x02, 0x06, 0x06, 
  0x02, 0x7E, 0x02, 0x7E, 0x02, 0x63, 0x55, 0x49, 0x41, 0x63, 
  0x38, 0x44, 0x44, 0x3C, 0x04, 0x40, 0x7E, 0x20, 0x1E, 0x20, 
  0x06, 0x02, 0x7E, 0x02, 0x02, 0x99, 0xA5, 0xE7, 0xA5, 0x99, 
  0x1C, 0x2A, 0x49, 0x2A, 0x1C, 0x4C, 0x72, 0x01, 0x72, 0x4C, 
  0x30, 0x4A, 0x4D, 0x4D, 0x30, 0x30, 0x48, 0x78, 0x48, 0x30, 
  0xBC, 0x62, 0x5A, 0x46, 0x3D, 0x3E, 0x49, 0x49, 0x49, 0x00, 
  0x7E, 0x01, 0x01, 0x01, 0x7E, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
  0x44, 0x44, 0x5F, 0x44, 0x44, 0x40, 0x51, 0x4A, 0x44, 0x40, 
  0x40, 0x44, 0x4A, 0x51, 0x40, 0x00, 0x00, 0xFF, 0x01, 0x03, 
  0xE0, 0x80, 0xFF, 0x00, 0x00, 0x08, 0x08, 0x6B, 0x6B, 0x08,
  0x36, 0x12, 0x36, 0x24, 0x36, 0x06, 0x0F, 0x09, 0x0F, 0x06, 
  0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 
  0x30, 0x40, 0xFF, 0x01, 0x01, 0x00, 0x1F, 0x01, 0x01, 0x1E, 
  0x00, 0x19, 0x1D, 0x17, 0x12, 0x00, 0x3C, 0x3C, 0x3C, 0x3C, 
  0x00, 0x00, 0x00, 0x00, 0x00
};

const uint8_t font_9x15[] = {
// IMAGE DATA:
/* height, pixels:  14,*/
/* width in bytes:  107,*/
/*0*/ 0,32,0,0,0,0,0,0,0,32,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,3,128,7,0,0,
8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,193,1,0,
/*1*/ 0,32,32,1,0,129,16,3,8,16,32,64,0,0,0,0,0,64,56,32,240,241,7,196,31,30,
127,56,248,0,0,0,4,0,1,62,124,32,248,224,227,195,159,63,62,130,248,192,23,36,
64,144,32,62,126,248,248,225,227,79,144,32,65,130,4,249,67,32,0,4,4,0,16,0,8,0,
0,8,0,28,0,2,48,128,17,192,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,1,2,35,
/*2*/ 0,32,32,33,193,71,137,4,8,16,32,72,2,0,0,0,0,32,68,48,8,2,4,70,0,1,64,68,
4,1,0,0,2,0,2,65,130,80,8,17,36,68,128,0,65,130,32,0,17,34,64,144,32,65,130,4,
9,18,4,65,144,32,65,130,4,1,66,64,0,4,10,0,32,0,8,0,0,8,0,34,0,2,0,0,16,0,1,0,
0,0,0,0,0,0,128,0,0,0,0,0,0,0,128,0,1,130,36,
/*3*/ 0,32,32,33,33,73,137,4,8,8,64,80,129,0,0,0,0,32,130,40,8,2,2,69,128,0,32,
130,4,1,0,0,1,0,4,65,130,136,8,18,32,72,128,0,1,130,32,0,17,33,192,152,33,65,
130,4,9,18,4,65,144,32,65,68,136,0,65,64,0,4,17,0,0,0,8,0,0,8,0,34,0,2,0,0,16,
0,1,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,128,0,1,130,24,
/*4*/ 0,32,0,240,35,129,132,4,0,8,64,224,128,0,0,0,0,16,130,36,0,1,129,68,143,0,
32,68,4,193,128,129,0,0,8,64,242,4,9,17,32,72,128,0,1,130,32,0,145,32,64,149,
34,65,130,4,9,18,0,65,16,17,65,40,80,128,64,128,0,132,32,0,0,248,232,225,195,
139,15,2,94,122,56,192,17,4,193,141,30,62,122,120,201,225,227,71,136,32,65,130,
132,248,3,1,1,1,0,
/*5*/ 0,32,0,32,65,1,2,3,0,8,64,80,129,0,0,0,0,8,130,32,128,128,67,196,144,30,
16,56,132,193,128,65,192,31,16,32,138,4,249,16,32,200,135,15,1,254,32,0,113,32,
64,149,36,65,126,4,249,225,0,65,16,17,73,16,32,64,64,0,1,4,0,0,0,0,25,18,36,76,
16,2,33,134,32,0,17,3,65,146,33,65,134,132,49,18,132,64,136,32,65,68,132,0,193,
0,1,6,0,
/*6*/ 0,32,0,32,129,3,2,35,0,8,64,72,242,7,192,31,0,8,130,32,64,0,36,4,144,33,
16,68,120,1,0,64,0,0,16,16,202,4,9,17,32,72,128,0,113,130,32,0,81,32,64,146,40,
65,2,4,73,0,3,65,16,17,73,16,32,32,64,0,1,4,0,0,0,0,9,18,32,72,144,15,33,130,
32,0,209,0,65,146,32,65,130,4,17,18,128,64,8,17,73,40,132,128,192,0,1,6,0,
/*7*/ 0,0,0,240,3,5,137,20,0,8,64,64,128,0,0,0,0,4,130,32,32,0,228,15,144,32,8,
130,0,1,0,128,0,0,8,8,178,252,9,18,32,72,128,0,65,130,32,0,145,32,64,146,48,65,
2,4,137,0,4,65,16,10,73,40,32,16,64,0,2,4,0,0,0,248,9,18,32,200,31,2,33,130,32,
0,49,0,65,146,32,65,130,4,17,224,131,64,8,17,73,16,132,64,0,1,1,1,0,
/*8*/ 0,0,0,32,1,137,148,8,0,8,64,0,128,0,0,0,0,2,130,32,16,0,4,4,144,32,8,130,
0,1,0,0,193,31,4,8,2,4,9,18,32,72,128,0,65,130,32,0,17,33,64,144,32,65,2,20,9,
17,4,65,16,10,73,68,32,8,64,0,4,4,0,0,0,4,9,18,32,72,0,2,30,130,32,0,209,0,65,
146,32,65,130,4,17,0,132,64,8,10,73,40,132,32,128,0,1,2,0,
/*9*/ 0,32,0,32,33,137,148,20,0,16,32,0,128,0,3,0,12,2,68,32,8,16,4,68,144,32,4,
68,128,192,128,1,2,0,2,0,2,4,9,17,36,68,128,0,65,130,32,8,17,34,64,144,32,65,2,
36,9,18,4,65,16,10,85,130,32,8,64,0,4,4,0,0,0,132,25,18,36,76,0,2,1,130,32,0,
17,3,65,146,32,65,134,132,17,16,132,72,8,10,85,68,196,16,128,0,1,2,0,
/*10*/ 0,32,0,0,192,71,8,35,0,16,32,0,0,0,3,0,12,1,56,252,249,227,3,132,15,31,4,
56,120,192,128,1,4,0,1,8,124,4,249,224,227,195,159,0,62,130,248,240,16,228,79,
144,32,62,2,248,8,226,3,129,15,4,34,130,32,248,67,0,8,4,0,0,0,120,233,225,195,
139,15,2,62,130,248,8,17,196,71,144,32,62,122,120,17,224,3,135,23,4,34,130,184,
248,131,0,1,2,0,
/*11*/ 0,0,0,0,0,1,0,0,0,32,16,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,192,3,128,7,128,
127,0,0,0,0,0,0,0,0,65,0,0,8,1,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,128,0,0,7,193,1,0,
/*12*/ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,65,0,0,8,1,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,132,0,0,0,0,0,0,
/*13*/ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,62,0,0,240,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,120,0,0,0,0,0,0
// CHARACTER WIDTHS:
/* first char:  32,
   char count:  95,
9, 4+(4<<4),	*/
// MONOSPACED FONT!
};
// Created by ttf2gfx utility
const uint8_t sarabun_light10ptBitmaps[] = {
    // Bitmap Data:
    0x1E,0x30,0x90,0x3C,0x13,0x0A,0x05,0x02,0x81,0x40,0xA0,0x50,0x28,0x10      // 'ก'
   ,0x78,0xF2,0x65,0x32,0x96,0x48,0x44,0x22,0x11,0x08,0x84,0x42,0x20,0xE0      // 'ข'
   ,0x6C,0xC9,0x78,0xB2,0x59,0x4B,0x24,0x22,0x11,0x08,0x84,0x42,0x20,0xE0      // 'ฃ'
   ,0x3E,0x20,0xA0,0x30,0x19,0xED,0x96,0xBA,0x81,0x40,0xA0,0x50,0x28,0x10      // 'ค'
   ,0x63,0x2F,0xA2,0x30,0x19,0xCC,0x96,0xCB,0x59,0x40,0xA0,0x50,0x28,0x10      // 'ฅ'
   ,0x6C,0x77,0x98,0x27,0xC9,0x94,0x5D,0x10,0x84,0x21,0x1E,0x49,0xD2,0x4C,0x61 // 'ฆ'
   ,0x0C,0x24,0x48,0x70,0x20,0x50,0x91,0x12,0x14,0x18,0x10                     // 'ง'
   ,0x3C,0x63,0xC1,0x01,0x31,0x51,0x49,0x39,0x09,0x09,0x09,0x0E                // 'จ'
   ,0x3E,0x30,0xB0,0x20,0x16,0x0C,0x86,0x42,0xC1,0x23,0x16,0x4D,0x24,0x60      // 'ฉ'
   ,0x00,0xDE,0x2E,0x5A,0x56,0x94,0x99,0x20,0x88,0x22,0x08,0x82,0x20,0x88,0x22
   ,0x07,0x00                                                                  // 'ช'
   ,0x00,0x6D,0x8A,0x4B,0x71,0x69,0x25,0x28,0x99,0x10,0x42,0x08,0x41,0x08,0x21
   ,0x04,0x20,0x78                                                             // 'ซ'
   ,0x3C,0x0E,0x10,0x60,0x43,0xC2,0x16,0x10,0xC0,0x86,0x04,0x30,0x21,0xE3,0x8C
   ,0xA7,0x65,0x2E,0xC6,0x10                                                   // 'ฌ'
   ,0x3C,0x05,0x88,0x14,0x10,0x78,0x41,0x31,0x05,0x04,0x14,0x10,0x50,0x41,0x71
   ,0x05,0x24,0x14,0x98,0xCC,0x3E,0x00,0x00,0x03,0x90,0x12,0x40,0x7A,0x00,0xF0 // 'ญ'
   ,0x1F,0x0C,0x26,0x05,0xC1,0x18,0x48,0x12,0x04,0x81,0x70,0x64,0x19,0x05,0x81
   ,0x00,0x41,0x93,0xC5,0x1D,0x49,0xCE,0x10                                    // 'ฎ'
   ,0x1F,0x0C,0x26,0x05,0xC1,0x18,0x48,0x12,0x04,0x81,0x70,0x64,0x19,0x05,0x81
   ,0x00,0x42,0x11,0x87,0xC1,0x9F,0xFD,0x30                                    // 'ฏ'
   ,0x3C,0xD8,0xE6,0x00,0x78,0x31,0x92,0x24,0x88,0xE2,0x08,0x82,0x20,0x88,0x1C
   ,0x00,0x02,0xE1,0xA9,0xC6,0x9A,0xB9,0x60                                    // 'ฐ'
   ,0x6C,0xFA,0x56,0x0E,0xF9,0x99,0x52,0xEE,0x42,0x88,0x51,0x0E,0x21,0x84,0x30
   ,0x86,0x10                                                                  // 'ฑ'
   ,0x77,0x0A,0xE8,0x62,0x23,0x01,0x19,0xC8,0xCA,0x47,0x72,0x29,0x11,0x51,0xCB
   ,0x13,0x58,0x96,0x83,0x10                                                   // 'ฒ'
   ,0x3C,0x05,0x88,0x14,0x10,0x78,0x41,0x31,0x05,0x04,0x14,0x10,0x50,0x43,0x71
   ,0x1D,0x25,0xD4,0x9D,0x4C,0x66                                              // 'ณ'
   ,0x3E,0x30,0xB0,0x30,0x19,0xCC,0xA6,0x52,0x91,0x50,0xB0,0x58,0x28,0x10      // 'ด'
   ,0x22,0x2A,0xA2,0x30,0x19,0xCC,0xA6,0x72,0x91,0x50,0xB0,0x58,0x28,0x10      // 'ต'
   ,0x1E,0x30,0x90,0x3C,0x13,0x0A,0x05,0x02,0x81,0x70,0xA4,0x52,0x26,0x10      // 'ถ'
   ,0x61,0xA4,0xD9,0x25,0xC9,0x16,0x45,0x11,0x44,0x51,0x18,0x46,0x11,0x84,0x41 // 'ท'
   ,0x38,0xA3,0x90,0x1F,0x80,0x72,0x09,0x04,0x82,0x41,0x20,0x90,0xC7,0xC0      // 'ธ'
   ,0x60,0x52,0x0A,0x41,0x38,0x21,0x04,0x20,0x84,0x10,0x82,0x11,0xC2,0xE4,0x74
   ,0x8C,0x60                                                                  // 'น'
   ,0x60,0x64,0x19,0x05,0xC1,0x10,0x44,0x11,0x04,0x41,0x10,0x44,0x11,0x8C,0x3E // 'บ'
   ,0x00,0x40,0x10,0x04,0x01,0x00,0x58,0x19,0x06,0x41,0x70,0x44,0x11,0x04,0x41
   ,0x10,0x44,0x11,0x04,0x63,0x0F,0x80                                         // 'ป'
   ,0x60,0xC8,0x64,0x3C,0x18,0x0C,0x06,0x23,0x39,0xB6,0xF1,0xF0,0x70,0x10      // 'ผ'
   ,0x00,0x80,0x40,0x20,0x10,0x0B,0x06,0x43,0x21,0xE0,0xC0,0x60,0x31,0x19,0xCD
   ,0xB7,0x8F,0x83,0x80,0x80                                                   // 'ฝ'
   ,0x61,0x19,0x39,0x92,0x97,0x29,0x16,0xD1,0x45,0x14,0x51,0xC5,0x18,0x31,0x83
   ,0x18,0x31,0x01                                                             // 'พ'
   ,0x00,0x10,0x01,0x00,0x10,0x01,0x00,0x16,0x11,0x93,0x99,0x29,0x72,0x91,0x6D
   ,0x14,0x51,0x45,0x1C,0x51,0x83,0x18,0x31,0x83,0x10,0x10                     // 'ฟ'
   ,0x1F,0x0C,0x22,0x05,0xC1,0x18,0x48,0x12,0x04,0x81,0x70,0x64,0x19,0x05,0x81 // 'ภ'
   ,0x60,0xC8,0x64,0x2E,0x11,0x08,0x84,0x42,0x21,0x78,0xCF,0x64,0xEC,0x30      // 'ม'
   ,0x71,0x91,0xF1,0x81,0xC1,0x71,0x81,0x81,0x81,0x81,0xC3,0x7C                // 'ย'
   ,0x79,0xC6,0xC0,0xF8,0x06,0x02,0x02,0x02,0x0E,0x12,0x12,0x0C                // 'ร'
   ,0x1E,0x30,0x90,0x3C,0x13,0x0A,0x05,0x02,0x81,0x70,0xA4,0x52,0x26,0x10,0x08
   ,0x04,0x02,0x01,0x00,0x80                                                   // 'ฤ'
   ,0x3E,0x30,0xB0,0x20,0x11,0xEB,0x0D,0x02,0x81,0x70,0xA4,0x52,0x26,0x10      // 'ล'
   ,0x1F,0x0C,0x22,0x05,0xC1,0x18,0x48,0x12,0x04,0x81,0x70,0x64,0x19,0x05,0x81
   ,0x00,0x40,0x10,0x04,0x01,0x00,0x40                                         // 'ฦ'
   ,0x3C,0x42,0xC1,0x01,0x01,0x01,0x01,0x01,0x07,0x09,0x09,0x06                // 'ว'
   ,0x00,0x9F,0xD8,0x70,0x58,0xCC,0xD6,0xCB,0x59,0x40,0xA0,0x50,0x28,0x14,0x08 // 'ศ'
   ,0x60,0x24,0x81,0x24,0x08,0xEE,0x41,0x52,0x8B,0x18,0x4F,0x82,0x04,0x10,0x20
   ,0x81,0x06,0x18,0x1F,0x80                                                   // 'ษ'
   ,0x00,0x8F,0xE6,0x1B,0x0A,0x04,0x8F,0xA6,0x19,0x02,0x40,0x9C,0x24,0x89,0x22
   ,0x30,0x80                                                                  // 'ส'
   ,0x60,0xD2,0x26,0x44,0xB8,0x61,0x14,0x24,0x84,0x90,0xA2,0x14,0x43,0x08,0x61
   ,0x08,0x20                                                                  // 'ห'
   ,0x00,0x0B,0x03,0xA4,0x25,0x20,0xE7,0x01,0x08,0x08,0x4C,0x42,0x52,0x16,0xD0
   ,0xA2,0x86,0x1C,0x30,0x61,0x01,0x00                                         // 'ฬ'
   ,0x3E,0x30,0xB0,0x20,0x13,0x0A,0x45,0x22,0xE1,0x40,0xA0,0x58,0x67,0xE0      // 'อ'
   ,0x7C,0xC1,0xA0,0xCF,0xA3,0x16,0x8A,0x44,0xE2,0x41,0x20,0x98,0xC7,0xC0      // 'ฮ'
   ,0x67,0x95,0x99,0x71,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01                // 'ฯ'
   ,0x61,0x91,0x91,0x92,0x76,0x3C,0x00,0x61,0x91,0x93,0xF2,0x7C                // 'ะ'
   ,0x61,0x91,0x92,0xF2,0x7C                                                   // 'ั'
   ,0x7D,0x8E,0x08,0x10,0x20,0x40,0x81,0x02,0x04,0x08,0x10                     // 'า'
   ,0x90,0x09,0x00,0x90,0x06,0x00,0x00,0x00,0x00,0x03,0xE0,0x63,0x04,0x10,0x01
   ,0x00,0x10,0x01,0x00,0x10,0x01,0x00,0x10,0x01,0x00,0x10,0x01                // 'ำ'
   ,0x3C,0x21,0xBF,0x40,0x60                                                   // 'ิ'
   ,0x01,0x01,0x7D,0xC3,0xFD,0x03                                              // 'ี'
   ,0x03,0xBF,0x70,0xFF,0xA0,0x30                                              // 'ึ'
   ,0x05,0x05,0x3D,0xC3,0xFD,0x03                                              // 'ื'
   ,0xF7,0x92                                                                  // 'ุ'
   ,0xE6,0x9A,0x79,0x24,0xE0                                                   // 'ู'
   ,0xF0                                                                       // 'ฺ'
   ,0x00                                                                       // ' '
   ,0x00                                                                       // '‌'
   ,0x00                                                                       // '‍'
   ,0x00                                                                       // '‏'
   ,0x10,0x10,0xFC,0x83,0x81,0x81,0x81,0x82,0xFC,0x82,0x81,0x81,0x81,0x81,0x82
   ,0xFC,0x10,0x10                                                             // '฿'
   ,0x88,0x88,0x88,0x88,0xE9,0x96                                              // 'เ'
   ,0x84,0x42,0x21,0x10,0x88,0x44,0x22,0x11,0x08,0xE7,0x4A,0x65,0x2C,0x60      // 'แ'
   ,0x39,0x46,0xE0,0x30,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08
   ,0x08,0x0E,0x09,0x09,0x06                                                   // 'โ'
   ,0x78,0xE4,0x94,0x94,0x68,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08
   ,0x08,0x0E,0x09,0x09,0x06                                                   // 'ใ'
   ,0xC4,0x4C,0x54,0x74,0x64,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04
   ,0x04,0x07,0x09,0x09,0x03                                                   // 'ไ'
   ,0x7D,0x8E,0x08,0x10,0x20,0x40,0x81,0x02,0x04,0x08,0x10,0x20,0x40,0x81,0x02 // 'ๅ'
   ,0x7E,0x5B,0x81,0xE1,0x91,0x91,0x61,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
   ,0x01,0x01                                                                  // 'ๆ'
   ,0x02,0x05,0xF4,0x08,0x77,0x53,0x80                                         // '็'
   ,0xF0                                                                       // '่'
   ,0xE3,0x47,0x92,0x4F,0x00                                                   // '้'
   ,0x7C,0xCA,0x79,0x54,0xEE,0xC0                                              // '๊'
   ,0x27,0xC8,0x40                                                             // '๋'
   ,0x04,0x37,0x38,0xA3,0x80                                                   // '์'
   ,0x69,0x99,0x60                                                             // 'ํ'
   ,0x3A,0x19,0x88,0x70                                                        // '๎'
   ,0x1E,0x18,0x65,0xEA,0xCD,0xA1,0x68,0x5B,0x35,0x7A,0x61,0x87,0x80           // '๏'
   ,0x1F,0x0C,0x1B,0x01,0xC0,0x18,0x03,0x00,0x70,0x1B,0x06,0x1F,0x00           // '๐'
   ,0x1F,0x0C,0x19,0x31,0x49,0x19,0x23,0x1C,0x61,0x8A,0x23,0x38,0xC0           // '๑'
   ,0xC0,0x04,0x00,0x40,0x04,0xEE,0x59,0xB5,0xC1,0x52,0x15,0x21,0x4C,0x14,0x03
   ,0x30,0x61,0xFC                                                             // '๒'
   ,0x3D,0xC8,0xA6,0x08,0xC1,0x18,0x23,0xC4,0x64,0x8C,0x91,0x62,0x20           // '๓'
   ,0x00,0x08,0x00,0xC0,0x04,0x00,0x41,0xFC,0x30,0x03,0x18,0x11,0x20,0x89,0x04
   ,0x70,0x21,0x80,0x83,0x83,0xFF,0x00                                         // '๔'
   ,0x00,0x10,0x61,0x09,0x30,0x96,0x1F,0xC6,0x00,0xC6,0x08,0x90,0x89,0x08,0xE0
   ,0x86,0x04,0x1C,0x3F,0xE0                                                   // '๕'
   ,0xC0,0x04,0x00,0x60,0x02,0x00,0x2F,0xC3,0x86,0x20,0x30,0x01,0x18,0x12,0x41
   ,0x24,0x23,0xC6,0x0F,0x80                                                   // '๖'
   ,0x00,0x10,0x01,0x00,0x10,0x01,0x3B,0x94,0xCD,0x84,0x58,0x45,0x84,0x5F,0x05
   ,0x88,0x68,0x8E,0x70,0xC0                                                   // '๗'
   ,0x00,0x20,0x04,0x00,0x80,0x31,0xF8,0xC0,0x20,0x04,0x06,0x81,0x33,0x26,0xF3
   ,0xF3,0x34,0x3C                                                             // '๘'
   ,0x00,0x10,0x01,0x00,0x10,0x01,0x3D,0x94,0x66,0x82,0x08,0x10,0x81,0x09,0x88
   ,0xA4,0x46,0x46,0x38,0x20                                                   // '๙'
   ,0x67,0x79,0x55,0x99,0x97,0x11,0x01,0x10,0x11,0x01,0x10,0x11,0x01,0x10,0x11
   ,0x01,0x10,0x11                                                             // '๚'
   ,0x3C,0x00,0x23,0x00,0x30,0xB0,0x11,0xDB,0x49,0x2D,0xD4,0x97,0x6E,0x32,0x91
   ,0x82,0x00,0x43,0x00,0x1E,0x00,0x00                                         // '๛'
   ,0x00                                                                       // ' '
   ,0x00                                                                       // '‌'
   ,0x00                                                                       // ' '
   ,0x00                                                                       // ' '
   ,0x00                                                                       // ' '
   ,0x00                                                                       // ' '
   ,0x00                                                                       // ' '
   ,0x00                                                                       // ' '
   ,0x00                                                                       // ' '
   ,0x00                                                                       // ' '
   ,0x00                                                                       // ' '
   ,0x00                                                                       // ' '
   ,0x00                                                                       // ' '
   ,0x00                                                                       // ' '
   ,0x00                                                                       // ' '
   ,0x00                                                                       // ' '
   ,0x00                                                                       // ' '
   ,0x00                                                                       // ' '
   ,0x00                                                                       // ' '
   ,0x00                                                                       // ' '
   ,0x00                                                                       // ' '
   ,0x00                                                                       // ' '
   ,0x00                                                                       // ' '
   ,0x00                                                                       // ' '
   ,0x00                                                                       // ' '
   ,0x00                                                                       // ' '
   ,0x00                                                                       // ' '
   ,0x00                                                                       // ' '
   ,0x00                                                                       // ' '
   ,0x00                                                                       // ' '
   ,0x00                                                                       // ' '
   ,0x00                                                                       // ' '
   ,0x00                                                                       // ' '
   ,0x00                                                                       // '‌'
   ,0x00                                                                       // ' '
   ,0x00                                                                       // ' '
   ,0xFF,0xE0,0x18,0x06,0x01,0x80,0x60,0x18,0x06,0x01,0x80,0x60,0x18,0x06,0x01
   ,0x80,0x60,0x1F,0xFC                                                        // 
};
const GFXglyph sarabun_light10ptGlyphs[] = {
// bitmapOffset, width, height, xAdvance, xOffset, yOffset
	  {     0,   9,  12,  13,    1,  -12 }, // 'ก'
	  {    14,   9,  12,  13,    1,  -12 }, // 'ข'
	  {    28,   9,  12,  13,    1,  -12 }, // 'ฃ'
	  {    42,   9,  12,  13,    1,  -12 }, // 'ค'
	  {    56,   9,  12,  13,    1,  -12 }, // 'ฅ'
	  {    70,  10,  12,  14,    1,  -12 }, // 'ฆ'
	  {    85,   7,  12,  10,    0,  -12 }, // 'ง'
	  {    96,   8,  12,  12,    1,  -12 }, // 'จ'
	  {   108,   9,  12,  12,    1,  -12 }, // 'ฉ'
	  {   122,  10,  13,  13,    1,  -13 }, // 'ช'
	  {   139,  11,  13,  14,    1,  -13 }, // 'ซ'
	  {   157,  13,  12,  17,    1,  -12 }, // 'ฌ'
	  {   177,  14,  17,  18,    1,  -12 }, // 'ญ'
	  {   207,  10,  18,  14,    1,  -12 }, // 'ฎ'
	  {   230,  10,  18,  14,    1,  -12 }, // 'ฏ'
	  {   253,  10,  18,  12,    0,  -12 }, // 'ฐ'
	  {   276,  11,  12,  15,    1,  -12 }, // 'ฑ'
	  {   293,  13,  12,  17,    1,  -12 }, // 'ฒ'
	  {   313,  14,  12,  17,    1,  -12 }, // 'ณ'
	  {   334,   9,  12,  13,    1,  -12 }, // 'ด'
	  {   348,   9,  12,  13,    1,  -12 }, // 'ต'
	  {   362,   9,  12,  13,    1,  -12 }, // 'ถ'
	  {   376,  10,  12,  14,    1,  -12 }, // 'ท'
	  {   391,   9,  12,  10,    0,  -12 }, // 'ธ'
	  {   405,  11,  12,  14,    1,  -12 }, // 'น'
	  {   422,  10,  12,  14,    1,  -12 }, // 'บ'
	  {   437,  10,  17,  14,    1,  -17 }, // 'ป'
	  {   459,   9,  12,  13,    1,  -12 }, // 'ผ'
	  {   473,   9,  17,  13,    1,  -17 }, // 'ฝ'
	  {   493,  12,  12,  16,    1,  -12 }, // 'พ'
	  {   511,  12,  17,  16,    1,  -17 }, // 'ฟ'
	  {   537,  10,  12,  14,    1,  -12 }, // 'ภ'
	  {   552,   9,  12,  13,    1,  -12 }, // 'ม'
	  {   566,   8,  12,  12,    1,  -12 }, // 'ย'
	  {   578,   8,  12,  11,    1,  -12 }, // 'ร'
	  {   590,   9,  17,  13,    1,  -12 }, // 'ฤ'
	  {   610,   9,  12,  12,    0,  -12 }, // 'ล'
	  {   624,  10,  17,  14,    1,  -12 }, // 'ฦ'
	  {   646,   8,  12,  11,    0,  -12 }, // 'ว'
	  {   658,   9,  13,  13,    1,  -13 }, // 'ศ'
	  {   673,  13,  12,  15,    1,  -12 }, // 'ษ'
	  {   693,  10,  13,  12,    0,  -13 }, // 'ส'
	  {   710,  11,  12,  14,    1,  -12 }, // 'ห'
	  {   727,  13,  13,  16,    1,  -13 }, // 'ฬ'
	  {   749,   9,  12,  13,    1,  -12 }, // 'อ'
	  {   763,   9,  12,  12,    1,  -12 }, // 'ฮ'
	  {   777,   8,  12,  12,    1,  -12 }, // 'ฯ'
	  {   789,   8,  12,  11,    1,  -12 }, // 'ะ'
	  {   801,   8,   5,   1,   -7,  -19 }, // 'ั'
	  {   806,   7,  12,  11,    1,  -12 }, // 'า'
	  {   817,  12,  18,  11,   -4,  -18 }, // 'ำ'
	  {   844,   9,   4,   1,  -10,  -18 }, // 'ิ'
	  {   849,   8,   6,   1,  -10,  -20 }, // 'ี'
	  {   855,   9,   5,   1,  -10,  -19 }, // 'ึ'
	  {   861,   8,   6,   1,  -10,  -20 }, // 'ื'
	  {   867,   3,   5,   1,   -5,    2 }, // 'ุ'
	  {   869,   6,   6,   1,   -8,    1 }, // 'ู'
	  {   874,   2,   2,   1,   -3,    1 }, // 'ฺ'
	  {   875,   1,   1,  12,    0,   -1 }, // ' '
	  {   876,   1,   1,   1,    0,    0 }, // '‌'
	  {   877,   1,   1,   1,    0,    0 }, // '‍'
	  {   878,   1,   1,   1,    0,    0 }, // '‏'
	  {   879,   8,  18,  12,    2,  -16 }, // '฿'
	  {   897,   4,  12,   8,    2,  -12 }, // 'เ'
	  {   903,   9,  12,  13,    2,  -12 }, // 'แ'
	  {   917,   8,  20,   9,   -1,  -20 }, // 'โ'
	  {   937,   8,  20,   9,   -1,  -20 }, // 'ใ'
	  {   957,   8,  20,   9,   -1,  -20 }, // 'ไ'
	  {   977,   7,  17,   7,   -3,  -12 }, // 'ๅ'
	  {   992,   8,  17,  13,    2,  -12 }, // 'ๆ'
	  {  1009,   7,   7,   1,   -9,  -21 }, // '็'
	  {  1016,   1,   4,   1,   -3,  -18 }, // '่'
	  {  1017,   7,   5,   1,   -7,  -19 }, // '้'
	  {  1022,   9,   5,   1,   -9,  -19 }, // '๊'
	  {  1028,   5,   4,   1,   -4,  -18 }, // '๋'
	  {  1031,   6,   6,   1,   -6,  -20 }, // '์'
	  {  1036,   4,   5,   1,   -4,  -19 }, // 'ํ'
	  {  1039,   5,   6,   1,   -6,  -20 }, // '๎'
	  {  1043,  10,  10,  13,    1,  -10 }, // '๏'
	  {  1056,  11,   9,  14,    1,   -9 }, // '๐'
	  {  1069,  11,   9,  14,    1,   -9 }, // '๑'
	  {  1082,  12,  12,  14,    0,  -12 }, // '๒'
	  {  1100,  11,   9,  14,    1,   -9 }, // '๓'
	  {  1113,  13,  13,  15,    1,  -13 }, // '๔'
	  {  1135,  12,  13,  14,    1,  -13 }, // '๕'
	  {  1155,  12,  13,  14,    0,  -13 }, // '๖'
	  {  1175,  12,  13,  15,    1,  -13 }, // '๗'
	  {  1195,  11,  13,  14,    1,  -13 }, // '๘'
	  {  1213,  12,  13,  15,    1,  -13 }, // '๙'
	  {  1233,  12,  12,  16,    1,  -12 }, // '๚'
	  {  1251,  17,  10,  20,    1,  -11 }, // '๛'
	  {  1273,   1,   1,  12,    0,   -1 }, // ' '
	  {  1274,   1,   1,   1,    0,    0 }, // '‌'
	  {  1275,   1,   1,  12,    0,   -1 }, // ' '
	  {  1276,   1,   1,  12,    0,   -1 }, // ' '
	  {  1277,   1,   1,  12,    0,   -1 }, // ' '
	  {  1278,   1,   1,  12,    0,   -1 }, // ' '
	  {  1279,   1,   1,  12,    0,   -1 }, // ' '
	  {  1280,   1,   1,  12,    0,   -1 }, // ' '
	  {  1281,   1,   1,  12,    0,   -1 }, // ' '
	  {  1282,   1,   1,  12,    0,   -1 }, // ' '
	  {  1283,   1,   1,  12,    0,   -1 }, // ' '
	  {  1284,   1,   1,  12,    0,   -1 }, // ' '
	  {  1285,   1,   1,  12,    0,   -1 }, // ' '
	  {  1286,   1,   1,  12,    0,   -1 }, // ' '
	  {  1287,   1,   1,  12,    0,   -1 }, // ' '
	  {  1288,   1,   1,  12,    0,   -1 }, // ' '
	  {  1289,   1,   1,  12,    0,   -1 }, // ' '
	  {  1290,   1,   1,  12,    0,   -1 }, // ' '
	  {  1291,   1,   1,  12,    0,   -1 }, // ' '
	  {  1292,   1,   1,  12,    0,   -1 }, // ' '
	  {  1293,   1,   1,  12,    0,   -1 }, // ' '
	  {  1294,   1,   1,  12,    0,   -1 }, // ' '
	  {  1295,   1,   1,  12,    0,   -1 }, // ' '
	  {  1296,   1,   1,  12,    0,   -1 }, // ' '
	  {  1297,   1,   1,  12,    0,   -1 }, // ' '
	  {  1298,   1,   1,  12,    0,   -1 }, // ' '
	  {  1299,   1,   1,  12,    0,   -1 }, // ' '
	  {  1300,   1,   1,  12,    0,   -1 }, // ' '
	  {  1301,   1,   1,  12,    0,   -1 }, // ' '
	  {  1302,   1,   1,  12,    0,   -1 }, // ' '
	  {  1303,   1,   1,  12,    0,   -1 }, // ' '
	  {  1304,   1,   1,  12,    0,   -1 }, // ' '
	  {  1305,   1,   1,  12,    0,   -1 }, // ' '
	  {  1306,   1,   1,   1,    0,    0 }, // '‌'
	  {  1307,   1,   1,  12,    0,   -1 }, // ' '
	  {  1308,   1,   1,  12,    0,   -1 }, // ' '
	  {  1309,  10,  15,  15,    2,  -15 } // 
};
const GFXfont thFont = {
    (uint8_t  *)sarabun_light10ptBitmaps,
    (GFXglyph *)sarabun_light10ptGlyphs,
    0x00, 
    0x7F, 
    26
};
// Approx. 2224 bytes
const uint8_t FreeSerif12pt7bBitmaps[] = {
    0xFF, 0xFE, 0xA8, 0x3F, 0xCF, 0x3C, 0xF3, 0x8A, 0x20, 0x0C, 0x40, 0xC4,
    0x08, 0x40, 0x8C, 0x08, 0xC7, 0xFF, 0x18, 0x81, 0x88, 0x10, 0x81, 0x08,
    0xFF, 0xE1, 0x18, 0x31, 0x03, 0x10, 0x31, 0x02, 0x10, 0x04, 0x07, 0xC6,
    0x5B, 0x12, 0xC4, 0xB1, 0x0F, 0x41, 0xF0, 0x1E, 0x01, 0xE0, 0x58, 0x13,
    0x84, 0xE1, 0x3C, 0x4F, 0x96, 0x3F, 0x01, 0x00, 0x00, 0x04, 0x03, 0x83,
    0x03, 0x9F, 0x81, 0xC2, 0x20, 0x60, 0x90, 0x38, 0x24, 0x0C, 0x12, 0x03,
    0x0D, 0x00, 0xC6, 0x47, 0x9E, 0x23, 0x10, 0x09, 0x84, 0x04, 0xE1, 0x03,
    0x30, 0x40, 0x8C, 0x20, 0x43, 0x08, 0x10, 0xC4, 0x08, 0x1E, 0x00, 0x03,
    0xC0, 0x02, 0x30, 0x03, 0x08, 0x01, 0x84, 0x00, 0xC4, 0x00, 0x7C, 0xF8,
    0x1C, 0x38, 0x1E, 0x08, 0x33, 0x0C, 0x31, 0xC4, 0x10, 0x74, 0x18, 0x3A,
    0x0C, 0x0E, 0x07, 0x03, 0x83, 0xC3, 0xE2, 0x7E, 0x3E, 0xFF, 0xA0, 0x04,
    0x21, 0x08, 0x61, 0x0C, 0x30, 0xC3, 0x0C, 0x30, 0xC1, 0x04, 0x18, 0x20,
    0x40, 0x81, 0x81, 0x02, 0x04, 0x18, 0x20, 0x83, 0x0C, 0x30, 0xC3, 0x0C,
    0x30, 0x86, 0x10, 0x84, 0x20, 0x30, 0xB3, 0xD7, 0x54, 0x38, 0x7C, 0xD3,
    0x30, 0x30, 0x10, 0x04, 0x00, 0x80, 0x10, 0x02, 0x00, 0x41, 0xFF, 0xC1,
    0x00, 0x20, 0x04, 0x00, 0x80, 0x10, 0x00, 0xDF, 0x95, 0x00, 0xFC, 0xFC,
    0x06, 0x0C, 0x10, 0x60, 0xC1, 0x06, 0x0C, 0x10, 0x60, 0xC1, 0x06, 0x0C,
    0x10, 0x60, 0xC0, 0x1E, 0x0C, 0xC6, 0x19, 0x86, 0xC0, 0xB0, 0x3C, 0x0F,
    0x03, 0xC0, 0xF0, 0x3C, 0x0F, 0x03, 0xC0, 0xD8, 0x66, 0x18, 0xCC, 0x1E,
    0x00, 0x11, 0xC3, 0x0C, 0x30, 0xC3, 0x0C, 0x30, 0xC3, 0x0C, 0x30, 0xC3,
    0x0C, 0xFC, 0x1E, 0x18, 0xC4, 0x1A, 0x06, 0x01, 0x80, 0x60, 0x10, 0x0C,
    0x02, 0x01, 0x00, 0xC0, 0x60, 0x30, 0x18, 0x1F, 0xF8, 0x1E, 0x18, 0xE8,
    0x18, 0x06, 0x01, 0x00, 0x80, 0xF0, 0x7E, 0x03, 0xC0, 0x70, 0x0C, 0x03,
    0x00, 0xC0, 0x6E, 0x11, 0xF8, 0x01, 0x00, 0xC0, 0x70, 0x2C, 0x0B, 0x04,
    0xC2, 0x30, 0x8C, 0x43, 0x20, 0xC8, 0x33, 0xFF, 0x03, 0x00, 0xC0, 0x30,
    0x0C, 0x00, 0x03, 0xF1, 0x00, 0x40, 0x18, 0x0F, 0x80, 0xF8, 0x0E, 0x01,
    0xC0, 0x30, 0x0C, 0x03, 0x00, 0xC0, 0x20, 0x1B, 0x8C, 0x7C, 0x00, 0x01,
    0xC3, 0xC1, 0xC0, 0xC0, 0x70, 0x18, 0x0E, 0xF3, 0xCE, 0xC1, 0xF0, 0x3C,
    0x0F, 0x03, 0xC0, 0xD8, 0x36, 0x08, 0xC6, 0x1E, 0x00, 0x3F, 0xD0, 0x38,
    0x08, 0x06, 0x01, 0x80, 0x40, 0x10, 0x0C, 0x02, 0x00, 0x80, 0x20, 0x10,
    0x04, 0x01, 0x00, 0x80, 0x20, 0x1F, 0x18, 0x6C, 0x0F, 0x03, 0xC0, 0xF8,
    0x67, 0x30, 0xF0, 0x1E, 0x09, 0xE6, 0x3B, 0x07, 0xC0, 0xF0, 0x3C, 0x0D,
    0x86, 0x1F, 0x00, 0x1E, 0x08, 0xC6, 0x1B, 0x02, 0xC0, 0xF0, 0x3C, 0x0F,
    0x03, 0xE0, 0xDC, 0x73, 0xEC, 0x06, 0x01, 0x80, 0xC0, 0x70, 0x38, 0x38,
    0x18, 0x00, 0xFC, 0x00, 0x3F, 0xCC, 0xC0, 0x00, 0x00, 0x06, 0x77, 0x12,
    0x40, 0x00, 0x00, 0x07, 0x01, 0xE0, 0x78, 0x1E, 0x07, 0x00, 0xC0, 0x0F,
    0x00, 0x3C, 0x00, 0xF0, 0x03, 0xC0, 0x07, 0x00, 0x10, 0xFF, 0xF0, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0x80, 0x0E, 0x00, 0x3C, 0x00, 0xF0,
    0x03, 0xC0, 0x0F, 0x00, 0x30, 0x0E, 0x07, 0x81, 0xE0, 0x78, 0x0E, 0x00,
    0x00, 0x00, 0x7C, 0x86, 0x83, 0xC3, 0x03, 0x03, 0x06, 0x0C, 0x08, 0x08,
    0x10, 0x10, 0x00, 0x00, 0x30, 0x30, 0x30, 0x03, 0xF0, 0x06, 0x06, 0x06,
    0x00, 0x86, 0x00, 0x26, 0x0E, 0xD3, 0x0C, 0xC7, 0x0C, 0x63, 0x84, 0x31,
    0xC6, 0x18, 0xE3, 0x08, 0x71, 0x8C, 0x4C, 0xC6, 0x46, 0x3D, 0xC1, 0x80,
    0x00, 0x30, 0x10, 0x07, 0xF0, 0x00, 0x80, 0x00, 0x60, 0x00, 0x70, 0x00,
    0x38, 0x00, 0x2E, 0x00, 0x13, 0x00, 0x19, 0xC0, 0x08, 0x60, 0x04, 0x38,
    0x04, 0x0C, 0x03, 0xFF, 0x03, 0x03, 0x81, 0x00, 0xE1, 0x80, 0x70, 0xC0,
    0x3D, 0xF0, 0x3F, 0xFF, 0x83, 0x0C, 0x30, 0x63, 0x06, 0x30, 0x63, 0x06,
    0x30, 0xC3, 0xF0, 0x30, 0xE3, 0x06, 0x30, 0x33, 0x03, 0x30, 0x33, 0x07,
    0x30, 0xEF, 0xFC, 0x07, 0xE2, 0x38, 0x3C, 0xC0, 0x3B, 0x00, 0x36, 0x00,
    0x38, 0x00, 0x30, 0x00, 0x60, 0x00, 0xC0, 0x01, 0x80, 0x03, 0x00, 0x03,
    0x00, 0x06, 0x00, 0x06, 0x00, 0x47, 0x03, 0x03, 0xF8, 0xFF, 0xC0, 0x30,
    0x78, 0x30, 0x1C, 0x30, 0x0E, 0x30, 0x06, 0x30, 0x03, 0x30, 0x03, 0x30,
    0x03, 0x30, 0x03, 0x30, 0x03, 0x30, 0x03, 0x30, 0x06, 0x30, 0x06, 0x30,
    0x0C, 0x30, 0x78, 0xFF, 0xC0, 0xFF, 0xFC, 0xC0, 0x33, 0x00, 0x4C, 0x00,
    0x30, 0x00, 0xC0, 0x43, 0x03, 0x0F, 0xFC, 0x30, 0x30, 0xC0, 0x43, 0x00,
    0x0C, 0x00, 0x30, 0x08, 0xC0, 0x23, 0x03, 0xBF, 0xFE, 0xFF, 0xFC, 0xC0,
    0x33, 0x00, 0x4C, 0x00, 0x30, 0x00, 0xC0, 0x43, 0x03, 0x0F, 0xFC, 0x30,
    0x30, 0xC0, 0x43, 0x00, 0x0C, 0x00, 0x30, 0x00, 0xC0, 0x03, 0x00, 0x3F,
    0x00, 0x07, 0xE4, 0x1C, 0x3C, 0x30, 0x0C, 0x60, 0x0C, 0x60, 0x04, 0xC0,
    0x00, 0xC0, 0x00, 0xC0, 0x3F, 0xC0, 0x0C, 0xC0, 0x0C, 0xC0, 0x0C, 0x60,
    0x0C, 0x60, 0x0C, 0x30, 0x0C, 0x1C, 0x1C, 0x07, 0xE0, 0xFC, 0x3F, 0x30,
    0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x3F,
    0xFC, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30,
    0x0C, 0x30, 0x0C, 0xFC, 0x3F, 0xFC, 0xC3, 0x0C, 0x30, 0xC3, 0x0C, 0x30,
    0xC3, 0x0C, 0x30, 0xC3, 0x3F, 0x3F, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
    0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0xC8, 0xF0, 0xFC, 0xFE, 0x30,
    0x38, 0x30, 0x20, 0x30, 0x40, 0x30, 0x80, 0x33, 0x00, 0x36, 0x00, 0x3E,
    0x00, 0x37, 0x00, 0x33, 0x80, 0x31, 0xC0, 0x30, 0xE0, 0x30, 0x70, 0x30,
    0x38, 0x30, 0x3C, 0xFC, 0x7F, 0xFC, 0x00, 0x60, 0x00, 0xC0, 0x01, 0x80,
    0x03, 0x00, 0x06, 0x00, 0x0C, 0x00, 0x18, 0x00, 0x30, 0x00, 0x60, 0x00,
    0xC0, 0x01, 0x80, 0x03, 0x00, 0x26, 0x00, 0x8C, 0x07, 0x7F, 0xFE, 0xF8,
    0x01, 0xE7, 0x00, 0x70, 0xE0, 0x0E, 0x1E, 0x03, 0xC2, 0xC0, 0x58, 0x5C,
    0x1B, 0x09, 0x82, 0x61, 0x38, 0x4C, 0x27, 0x11, 0x84, 0x72, 0x30, 0x8E,
    0xC6, 0x10, 0xD0, 0xC2, 0x1E, 0x18, 0x41, 0x83, 0x1C, 0x30, 0x67, 0xC4,
    0x3F, 0xF0, 0x1F, 0x78, 0x0E, 0x3C, 0x04, 0x3E, 0x04, 0x2E, 0x04, 0x27,
    0x04, 0x23, 0x84, 0x23, 0xC4, 0x21, 0xE4, 0x20, 0xE4, 0x20, 0x74, 0x20,
    0x3C, 0x20, 0x1C, 0x20, 0x0C, 0x70, 0x0C, 0xF8, 0x04, 0x07, 0xC0, 0x30,
    0x60, 0xC0, 0x63, 0x00, 0x66, 0x00, 0xD8, 0x00, 0xF0, 0x01, 0xE0, 0x03,
    0xC0, 0x07, 0x80, 0x0F, 0x00, 0x1B, 0x00, 0x66, 0x00, 0xC6, 0x03, 0x06,
    0x0C, 0x03, 0xE0, 0xFF, 0x83, 0x0E, 0x30, 0x73, 0x03, 0x30, 0x33, 0x03,
    0x30, 0x63, 0x0E, 0x3F, 0x83, 0x00, 0x30, 0x03, 0x00, 0x30, 0x03, 0x00,
    0x30, 0x0F, 0xC0, 0x0F, 0xE0, 0x18, 0x30, 0x30, 0x18, 0x60, 0x0C, 0x60,
    0x0C, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, 0xC0, 0x06, 0xC0,
    0x06, 0x60, 0x0C, 0x60, 0x0C, 0x30, 0x18, 0x18, 0x30, 0x07, 0xC0, 0x03,
    0xC0, 0x01, 0xE0, 0x00, 0x78, 0x00, 0x1F, 0xFF, 0x80, 0x61, 0xC0, 0xC1,
    0xC1, 0x81, 0x83, 0x03, 0x06, 0x06, 0x0C, 0x1C, 0x18, 0x70, 0x3F, 0x80,
    0x67, 0x00, 0xC7, 0x01, 0x8F, 0x03, 0x0F, 0x06, 0x0E, 0x0C, 0x0E, 0x7E,
    0x0F, 0x1F, 0x46, 0x19, 0x81, 0x30, 0x27, 0x02, 0xF0, 0x0F, 0x00, 0xF8,
    0x07, 0xC0, 0x38, 0x03, 0xC0, 0x34, 0x06, 0x80, 0xDC, 0x32, 0x7C, 0xFF,
    0xFF, 0x86, 0x0E, 0x0C, 0x1C, 0x18, 0x10, 0x30, 0x00, 0x60, 0x00, 0xC0,
    0x01, 0x80, 0x03, 0x00, 0x06, 0x00, 0x0C, 0x00, 0x18, 0x00, 0x30, 0x00,
    0x60, 0x00, 0xC0, 0x07, 0xE0, 0xFC, 0x1F, 0x30, 0x0E, 0x30, 0x04, 0x30,
    0x04, 0x30, 0x04, 0x30, 0x04, 0x30, 0x04, 0x30, 0x04, 0x30, 0x04, 0x30,
    0x04, 0x30, 0x04, 0x30, 0x04, 0x30, 0x04, 0x18, 0x08, 0x1C, 0x18, 0x07,
    0xE0, 0xFE, 0x0F, 0x9C, 0x03, 0x0E, 0x01, 0x83, 0x00, 0x81, 0xC0, 0x40,
    0x60, 0x40, 0x38, 0x20, 0x0C, 0x30, 0x07, 0x10, 0x01, 0x98, 0x00, 0xE8,
    0x00, 0x34, 0x00, 0x1E, 0x00, 0x06, 0x00, 0x03, 0x00, 0x01, 0x00, 0xFC,
    0xFC, 0x3D, 0xE1, 0xC0, 0x63, 0x83, 0x01, 0x86, 0x0E, 0x04, 0x1C, 0x18,
    0x10, 0x70, 0x70, 0x80, 0xC3, 0xC2, 0x03, 0x8B, 0x08, 0x06, 0x6E, 0x40,
    0x1D, 0x19, 0x00, 0x74, 0x78, 0x00, 0xE1, 0xE0, 0x03, 0x83, 0x80, 0x0E,
    0x0C, 0x00, 0x10, 0x10, 0x00, 0x40, 0x40, 0x7F, 0x1F, 0x9E, 0x03, 0x07,
    0x03, 0x01, 0xC3, 0x00, 0x71, 0x00, 0x19, 0x00, 0x0F, 0x00, 0x03, 0x80,
    0x01, 0xE0, 0x01, 0xB0, 0x01, 0x9C, 0x00, 0x87, 0x00, 0x81, 0xC0, 0x80,
    0xE0, 0xC0, 0x79, 0xF8, 0x7F, 0xFE, 0x1F, 0x78, 0x0C, 0x38, 0x08, 0x1C,
    0x18, 0x0E, 0x10, 0x06, 0x20, 0x07, 0x60, 0x03, 0xC0, 0x01, 0x80, 0x01,
    0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x07,
    0xE0, 0x7F, 0xFB, 0x00, 0xC8, 0x07, 0x20, 0x38, 0x01, 0xC0, 0x07, 0x00,
    0x38, 0x01, 0xC0, 0x07, 0x00, 0x38, 0x01, 0xC0, 0x0E, 0x00, 0x38, 0x05,
    0xC0, 0x3E, 0x01, 0xBF, 0xFE, 0xFE, 0x31, 0x8C, 0x63, 0x18, 0xC6, 0x31,
    0x8C, 0x63, 0x18, 0xC6, 0x31, 0xF0, 0xC1, 0x81, 0x03, 0x06, 0x04, 0x0C,
    0x18, 0x10, 0x30, 0x60, 0x40, 0xC1, 0x81, 0x03, 0x06, 0xF8, 0xC6, 0x31,
    0x8C, 0x63, 0x18, 0xC6, 0x31, 0x8C, 0x63, 0x18, 0xC7, 0xF0, 0x0C, 0x07,
    0x01, 0x60, 0xD8, 0x23, 0x18, 0xC4, 0x1B, 0x06, 0x80, 0xC0, 0xFF, 0xF0,
    0xC7, 0x0C, 0x30, 0x3E, 0x31, 0x8C, 0x30, 0x0C, 0x03, 0x07, 0xC6, 0x33,
    0x0C, 0xC3, 0x31, 0xC7, 0xB8, 0x20, 0x38, 0x06, 0x01, 0x80, 0x60, 0x18,
    0x06, 0xF1, 0xC6, 0x61, 0xD8, 0x36, 0x0D, 0x83, 0x60, 0xD8, 0x26, 0x19,
    0x84, 0x3E, 0x00, 0x1E, 0x23, 0x63, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE1,
    0x72, 0x3C, 0x00, 0x80, 0xE0, 0x18, 0x06, 0x01, 0x80, 0x61, 0xD8, 0x8E,
    0x61, 0xB0, 0x6C, 0x1B, 0x06, 0xC1, 0xB0, 0x6E, 0x19, 0xCE, 0x3D, 0xC0,
    0x1E, 0x08, 0xE4, 0x1B, 0xFE, 0xC0, 0x30, 0x0C, 0x03, 0x81, 0x60, 0x9C,
    0x41, 0xE0, 0x0F, 0x08, 0xC4, 0x06, 0x03, 0x01, 0x81, 0xF0, 0x60, 0x30,
    0x18, 0x0C, 0x06, 0x03, 0x01, 0x80, 0xC0, 0x60, 0xFC, 0x00, 0x1F, 0x03,
    0x1F, 0x60, 0xC6, 0x0C, 0x60, 0xC3, 0x18, 0x1F, 0x02, 0x00, 0x40, 0x07,
    0xFC, 0x40, 0x24, 0x02, 0xC0, 0x2C, 0x04, 0xE0, 0x83, 0xF0, 0x30, 0x1E,
    0x00, 0xC0, 0x18, 0x03, 0x00, 0x60, 0x0D, 0xE1, 0xCE, 0x30, 0xC6, 0x18,
    0xC3, 0x18, 0x63, 0x0C, 0x61, 0x8C, 0x31, 0x86, 0x79, 0xE0, 0x31, 0x80,
    0x00, 0x09, 0xC6, 0x31, 0x8C, 0x63, 0x18, 0xDF, 0x0C, 0x30, 0x00, 0x00,
    0x31, 0xC3, 0x0C, 0x30, 0xC3, 0x0C, 0x30, 0xC3, 0x0C, 0x30, 0xF2, 0xF0,
    0x20, 0x1C, 0x01, 0x80, 0x30, 0x06, 0x00, 0xC0, 0x18, 0xFB, 0x08, 0x62,
    0x0C, 0x81, 0xE0, 0x3E, 0x06, 0xE0, 0xCE, 0x18, 0xC3, 0x0E, 0xF3, 0xE0,
    0x13, 0x8C, 0x63, 0x18, 0xC6, 0x31, 0x8C, 0x63, 0x18, 0xC6, 0xF8, 0xF7,
    0x8F, 0x0E, 0x3C, 0xE3, 0x0C, 0x18, 0xC3, 0x06, 0x30, 0xC1, 0x8C, 0x30,
    0x63, 0x0C, 0x18, 0xC3, 0x06, 0x30, 0xC1, 0x8C, 0x30, 0x67, 0x9E, 0x3C,
    0xF7, 0x87, 0x18, 0xC3, 0x18, 0x63, 0x0C, 0x61, 0x8C, 0x31, 0x86, 0x30,
    0xC6, 0x19, 0xE7, 0x80, 0x1E, 0x18, 0xE4, 0x1B, 0x03, 0xC0, 0xF0, 0x3C,
    0x0F, 0x03, 0x60, 0x9C, 0x41, 0xE0, 0x77, 0x87, 0x18, 0xC3, 0x98, 0x33,
    0x06, 0x60, 0xCC, 0x19, 0x83, 0x30, 0xC7, 0x10, 0xDC, 0x18, 0x03, 0x00,
    0x60, 0x0C, 0x07, 0xE0, 0x1E, 0x8C, 0xE6, 0x1B, 0x06, 0xC1, 0xB0, 0x6C,
    0x1B, 0x06, 0xE1, 0x98, 0xE3, 0xD8, 0x06, 0x01, 0x80, 0x60, 0x18, 0x1F,
    0x37, 0x7B, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x7C, 0x7B,
    0x0E, 0x1C, 0x1E, 0x0F, 0x07, 0xC3, 0x87, 0x8A, 0xE0, 0x21, 0x8F, 0x98,
    0x61, 0x86, 0x18, 0x61, 0x86, 0x19, 0x38, 0xE3, 0x98, 0x66, 0x19, 0x86,
    0x61, 0x98, 0x66, 0x19, 0x86, 0x61, 0x9C, 0xE3, 0xDC, 0xF8, 0xEE, 0x08,
    0xC1, 0x18, 0x41, 0x88, 0x32, 0x03, 0x40, 0x68, 0x06, 0x00, 0xC0, 0x10,
    0x00, 0xF3, 0xE7, 0x61, 0x83, 0x70, 0xC2, 0x30, 0xC2, 0x30, 0xC4, 0x19,
    0x64, 0x19, 0x68, 0x0E, 0x38, 0x0E, 0x38, 0x0C, 0x30, 0x04, 0x10, 0xFB,
    0xC6, 0x30, 0x64, 0x0F, 0x00, 0xC0, 0x0C, 0x03, 0xC0, 0x98, 0x21, 0x8C,
    0x3B, 0xCF, 0x80, 0xF8, 0xEE, 0x08, 0xC1, 0x18, 0x41, 0x88, 0x31, 0x03,
    0x40, 0x68, 0x06, 0x00, 0xC0, 0x08, 0x02, 0x00, 0x40, 0x10, 0x1E, 0x03,
    0x80, 0x7F, 0x90, 0xE0, 0x30, 0x18, 0x0E, 0x03, 0x01, 0xC0, 0xE0, 0x30,
    0x5C, 0x3F, 0xF8, 0x19, 0x8C, 0x63, 0x18, 0xC6, 0x31, 0xB0, 0x63, 0x18,
    0xC6, 0x31, 0x8C, 0x61, 0x80, 0xFF, 0xFF, 0x80, 0xC3, 0x18, 0xC6, 0x31,
    0x8C, 0x63, 0x06, 0xC6, 0x31, 0x8C, 0x63, 0x18, 0xCC, 0x00, 0x38, 0x06,
    0x62, 0x41, 0xC0};

const GFXglyph FreeSerif12pt7bGlyphs[] = {
    {0, 0, 0, 6, 0, 1},         // 0x20 ' '
    {0, 2, 16, 8, 3, -15},      // 0x21 '!'
    {4, 6, 6, 10, 1, -15},      // 0x22 '"'
    {9, 12, 16, 12, 0, -15},    // 0x23 '#'
    {33, 10, 18, 12, 1, -16},   // 0x24 '$'
    {56, 18, 17, 20, 1, -16},   // 0x25 '%'
    {95, 17, 16, 19, 1, -15},   // 0x26 '&'
    {129, 2, 6, 5, 1, -15},     // 0x27 '''
    {131, 6, 20, 8, 1, -15},    // 0x28 '('
    {146, 6, 20, 8, 1, -15},    // 0x29 ')'
    {161, 8, 10, 12, 3, -14},   // 0x2A '*'
    {171, 11, 11, 14, 1, -10},  // 0x2B '+'
    {187, 3, 6, 6, 2, -2},      // 0x2C ','
    {190, 6, 1, 8, 1, -5},      // 0x2D '-'
    {191, 2, 3, 6, 2, -2},      // 0x2E '.'
    {192, 7, 17, 7, 0, -16},    // 0x2F '/'
    {207, 10, 17, 12, 1, -16},  // 0x30 '0'
    {229, 6, 17, 12, 3, -16},   // 0x31 '1'
    {242, 10, 15, 12, 1, -14},  // 0x32 '2'
    {261, 10, 16, 12, 1, -15},  // 0x33 '3'
    {281, 10, 16, 12, 1, -15},  // 0x34 '4'
    {301, 10, 17, 12, 1, -16},  // 0x35 '5'
    {323, 10, 17, 12, 1, -16},  // 0x36 '6'
    {345, 10, 16, 12, 0, -15},  // 0x37 '7'
    {365, 10, 17, 12, 1, -16},  // 0x38 '8'
    {387, 10, 18, 12, 1, -16},  // 0x39 '9'
    {410, 2, 12, 6, 2, -11},    // 0x3A ':'
    {413, 4, 15, 6, 2, -11},    // 0x3B ';'
    {421, 12, 13, 14, 1, -12},  // 0x3C '<'
    {441, 12, 6, 14, 1, -8},    // 0x3D '='
    {450, 12, 13, 14, 1, -11},  // 0x3E '>'
    {470, 8, 17, 11, 2, -16},   // 0x3F '?'
    {487, 17, 16, 21, 2, -15},  // 0x40 '@'
    {521, 17, 16, 17, 0, -15},  // 0x41 'A'
    {555, 12, 16, 15, 1, -15},  // 0x42 'B'
    {579, 15, 16, 16, 1, -15},  // 0x43 'C'
    {609, 16, 16, 17, 0, -15},  // 0x44 'D'
    {641, 14, 16, 15, 0, -15},  // 0x45 'E'
    {669, 14, 16, 14, 0, -15},  // 0x46 'F'
    {697, 16, 16, 17, 1, -15},  // 0x47 'G'
    {729, 16, 16, 17, 0, -15},  // 0x48 'H'
    {761, 6, 16, 8, 1, -15},    // 0x49 'I'
    {773, 8, 16, 9, 0, -15},    // 0x4A 'J'
    {789, 16, 16, 17, 1, -15},  // 0x4B 'K'
    {821, 15, 16, 15, 0, -15},  // 0x4C 'L'
    {851, 19, 16, 21, 1, -15},  // 0x4D 'M'
    {889, 16, 16, 17, 1, -15},  // 0x4E 'N'
    {921, 15, 16, 17, 1, -15},  // 0x4F 'O'
    {951, 12, 16, 14, 0, -15},  // 0x50 'P'
    {975, 16, 20, 17, 1, -15},  // 0x51 'Q'
    {1015, 15, 16, 16, 0, -15}, // 0x52 'R'
    {1045, 11, 16, 13, 0, -15}, // 0x53 'S'
    {1067, 15, 16, 15, 0, -15}, // 0x54 'T'
    {1097, 16, 16, 17, 1, -15}, // 0x55 'U'
    {1129, 17, 16, 17, 0, -15}, // 0x56 'V'
    {1163, 22, 16, 23, 0, -15}, // 0x57 'W'
    {1207, 17, 16, 17, 0, -15}, // 0x58 'X'
    {1241, 16, 16, 17, 0, -15}, // 0x59 'Y'
    {1273, 14, 16, 15, 1, -15}, // 0x5A 'Z'
    {1301, 5, 20, 8, 2, -15},   // 0x5B '['
    {1314, 7, 17, 7, 0, -16},   // 0x5C '\'
    {1329, 5, 20, 8, 1, -15},   // 0x5D ']'
    {1342, 10, 9, 11, 1, -15},  // 0x5E '^'
    {1354, 12, 1, 12, 0, 3},    // 0x5F '_'
    {1356, 5, 4, 6, 0, -15},    // 0x60 '`'
    {1359, 10, 11, 10, 1, -10}, // 0x61 'a'
    {1373, 10, 17, 12, 1, -16}, // 0x62 'b'
    {1395, 8, 11, 11, 1, -10},  // 0x63 'c'
    {1406, 10, 17, 12, 1, -16}, // 0x64 'd'
    {1428, 10, 11, 11, 1, -10}, // 0x65 'e'
    {1442, 9, 17, 9, 0, -16},   // 0x66 'f'
    {1462, 12, 16, 11, 0, -10}, // 0x67 'g'
    {1486, 11, 17, 12, 0, -16}, // 0x68 'h'
    {1510, 5, 16, 7, 0, -15},   // 0x69 'i'
    {1520, 6, 21, 8, 0, -15},   // 0x6A 'j'
    {1536, 11, 17, 12, 1, -16}, // 0x6B 'k'
    {1560, 5, 17, 6, 0, -16},   // 0x6C 'l'
    {1571, 18, 11, 19, 0, -10}, // 0x6D 'm'
    {1596, 11, 11, 12, 0, -10}, // 0x6E 'n'
    {1612, 10, 11, 12, 1, -10}, // 0x6F 'o'
    {1626, 11, 16, 12, 0, -10}, // 0x70 'p'
    {1648, 10, 16, 12, 1, -10}, // 0x71 'q'
    {1668, 8, 11, 8, 0, -10},   // 0x72 'r'
    {1679, 7, 11, 9, 1, -10},   // 0x73 's'
    {1689, 6, 13, 7, 1, -12},   // 0x74 't'
    {1699, 10, 11, 12, 1, -10}, // 0x75 'u'
    {1713, 11, 11, 11, 0, -10}, // 0x76 'v'
    {1729, 16, 11, 16, 0, -10}, // 0x77 'w'
    {1751, 11, 11, 12, 0, -10}, // 0x78 'x'
    {1767, 11, 16, 11, 0, -10}, // 0x79 'y'
    {1789, 10, 11, 10, 0, -10}, // 0x7A 'z'
    {1803, 5, 21, 12, 2, -16},  // 0x7B '{'
    {1817, 1, 17, 5, 2, -16},   // 0x7C '|'
    {1820, 5, 21, 12, 5, -15},  // 0x7D '}'
    {1834, 12, 3, 12, 0, -6}};  // 0x7E '~'

const GFXfont enFont = {(uint8_t *)FreeSerif12pt7bBitmaps,
                       (GFXglyph *)FreeSerif12pt7bGlyphs,
                       0x20, 0x7E, 29};

// Approx. 2511 bytes
uint8_t initCmdSSD1306[] = {// initialization for an SSD1306 controller
	0x80,0xae,				// turn off difplay
	0x80,0xd4,0x80,0x80,	// setDisplayClockDiv	
	0x80,0xa8,0x80,0x3f,	// setMultiplex, 63 lines
	0x80,0xd3,0x80,0x00,	// display offset
	0x80,0x40,				// set display start line register to 0
	0x80,0xda,0x80,0x12,	// setcompins, default
	0x80,0x20,0x80,0x02,	// page addressing 0x20, 0x02
	0x80,0x8d,				// set charge pump
	0x80,0x14,				// enable charge pump
	0x80,0xa4,				// set display normal display mode
	0x80,0xa6,				// set display normal display mode
	0x80,0xaf,				// turn on display
	0x80,0xa1,0x80,0xc8		// assuming pins on top
};

#define OLED_GFX_RENDER_FLAG				0x01

OLED_GFX::OLED_GFX(int bus_ch, int dev_addr) {
	channel = bus_ch;
	address = dev_addr;
	polling_ms = 100;
}

void OLED_GFX::init(void) {
	flag = 0;
	set_flag = 0;
	clr_flag = 0;
	state = s_detect;
}

void OLED_GFX::process(Driver *drv) {
	I2CDev *i2c = i2cPtr = (I2CDev *)drv;
	switch (state) {
		case s_detect:				// detect i2c device
			if (i2c->detect(channel, address) == ESP_OK) 	state = s_cmd_init;
			else 	state = s_error;
			break;

		case s_cmd_init:
			if (i2cPtr->write(0, address, initCmdSSD1306, sizeof(initCmdSSD1306)) == ESP_OK) {
				error = false;		// clear error flag
				initialized = true;	// set initialized flag
				state = s_idle;		// goto idle state
			}else state = s_error;
			break;

		case s_idle:
			// check set/clr flag
			if (clr_flag & 0x7f) {
				FLAG_CLR(flag, clr_flag & 0x7f);
				clr_flag = 0;
			}
			if (set_flag & 0x7f) {
				FLAG_SET(flag, set_flag & 0x7f);
				set_flag = 0;
			}

			// check pending flag
			if (IS_FLAG_SET(flag, OLED_GFX_RENDER_FLAG)) {
				FLAG_CLR(flag, OLED_GFX_RENDER_FLAG);
				// render
//				if (render(i2c) != ESP_OK) {
//					state = s_error;
//				}
			}
			break;

		case s_error:
			error = true;			// set error flag
			initialized = false;	// clear initialized flag
			tickcnt = get_tickcnt();// get current tickcnt
			state = s_wait;			// goto wait and retry with detect state
			break;

		case s_wait:
			// delay 1s then retry detect
			if (is_tickcnt_elapsed(tickcnt, 1000)) {
				state = s_detect;
			}
			break;
	}
}

void OLED_GFX::clear(int chipSet, int orientation) {
	sh1106 = chipSet == 1;
	initCmdSSD1306[sizeof(initCmdSSD1306)-3] = orientation ? 0xa0 : 0xa1;	// flip display ?
	initCmdSSD1306[sizeof(initCmdSSD1306)-1] = orientation ? 0xc0 : 0xc8;
	i2cPtr->write(0, address, initCmdSSD1306, sizeof(initCmdSSD1306));		// reinitialize
	memset(bufr, 0, sizeof(bufr));	// clear buffer for 128 spaces
	for(int i=0; i<8; i++){			// foreach of 8 lines
		setCursor(i,0,0);			// set the address to the start of line
		*bufPtr++ = 0x40;			// data to follow
		bufPtr += 128;				// advance the pointer to clear whole line
		i2cPtr->write(0, address, bufr, bufPtr-bufr);	// write set cursor cmd and 128 0s
	}
	sRow = sCol = mRow = mCol = gRow = gCol = 0;	// reset all cursors
	set_flag |= (0x80 | OLED_GFX_RENDER_FLAG);
}

void OLED_GFX::setCursor(int row, int col, int lines){
	hPos = (lines == 1 ? 6 : 9) * (col % (lines == 1 ? 21 : 14));
	if( sh1106)	hPos += 2;			// shift 2 bits if SH1106
//	printf("mrow %d, mcol %d, hPos %d\n", row, col, hPos);
	bufPtr = bufr;
	memset(bufr, 0, sizeof(bufr));
	*bufPtr++ = 0x80;
    *bufPtr++ = hPos & 0x0f;      	// column address low
    *bufPtr++ = 0x80;
    *bufPtr++ = (hPos >> 4)+ 0x10;	// column address high + 0x10
    *bufPtr++ = 0x80;
    *bufPtr++ = (row & 7) + 0xb0; 	// page (row) address + 0xb0
	if(lines < 2)	return;

	bf2Ptr = buf2;
	memset(buf2, 0, sizeof(buf2));
	*bf2Ptr++ = 0x80;
    *bf2Ptr++ = hPos & 0x0f;      	// column address low
    *bf2Ptr++ = 0x80;
    *bf2Ptr++ = (hPos >> 4) + 0x10;	// column address high + 0x10
    *bf2Ptr++ = 0x80;
    *bf2Ptr++ = ((row+1) & 7) + 0xb0;	// page address + 0xb0
}

void OLED_GFX::print5x7(char chr){
	if(chr == '\n'){		// handle new line, clear to end of line and position cursor to start of next line
        bufPtr += 6 * (21-sCol) + 2;
		sCol = 21;
		return;
	}
	uint16_t i, c = chr-32;	// index into font_5x7 array, skip non-printable characters
	if(c > sizeof(font_5x7)/5)
		return;				// unprintable
	for(i=0; i<5; i++)
		*bufPtr++ = font_5x7[c*5+i];
	*bufPtr++ = 0;			// interchacter space
	sCol++;
}

void OLED_GFX::printSmall(int row, int col, char *str){
	if(col > 0)		sCol = (col - 1) % 21;		// keep in the range 0-20 no matter what the user sends
	if(row > 0)		sRow = (row - 1) & 7;		// keep in the range 0-7 no matter what the user sends
	if(*str == 0)	return;						// a print with an empty string is just a set cursor
	while(true){
		setCursor(sRow, sCol, 1);
		*bufPtr++ = 0x40;	// data follows
		while(*str){
			print5x7(*str++);
			if(sCol > 20){
//		printf("1sRow %d, sCol %d, char %c, bufr index %d\n", sRow, sCol, *str, bufPtr-bufr);
				i2cPtr->write(0, address, bufr, bufPtr-bufr);
				sRow++;		// wrap to next line
				sRow &= 7;	// if past last line, wrap to first line
				sCol = 0;
//		printf("2sRow %d, sCol %d, char %c, bufr index %d\n", sRow, sCol, *str, bufPtr-bufr);
				break;
			}
		}
		if(*str)	continue;
		i2cPtr->write(0, address, bufr, bufPtr-bufr);
		break;
	}
}

uint8_t getBit(const uint8_t *bitArray, uint16_t bitNumber){
	uint8_t bite = bitArray[bitNumber>>3];
	uint8_t bit = bite >> (bitNumber & 7);
	return bit & 1;
}

void OLED_GFX::print9x15(char chr){
	if(chr == '\n'){		// handle new line, clear to end of line and position cursor to start of next line
        bufPtr += 9 * (14-mCol) + 2;
        bf2Ptr += 9 * (14-mCol) + 2;
		mCol = 15;
		return;
	}
	uint16_t i, j, k, c = (chr & 0x7f) - 32;

	for(i=0; i<14; i++){	
		k = 107*i*8 + c*9;		// byte 0 offset into the bit array
		for(j=0; j<9; j++){
		 	if(getBit(font_9x15, k++)){
				if(i<8)	bufPtr[j] |= (1<<i);
				else	bf2Ptr[j] |= (1<<(i-8));
			}
		}
	}
	bufPtr+=9;
	bf2Ptr+=9;
	mCol++;
}

void OLED_GFX::printLarge(int row, int col, char *str){
	if(col > 0)		mCol = (col - 1) % 14;		// keep in the range 0-12 no matter what the user sends
	if(row > 0)		mRow = (row - 1) & 7;		// keep in the range 0-7 no matter what the user sends
	if(*str == 0)	return;						// a print with an empty string is just a set cursor function
	while(true){
//		printf("row %d, col %d\n", mRow, mCol);
		setCursor(mRow, mCol, 2);	// addresses  in the output puffers
		*bufPtr++ = 0x40;	// data follows - upper page
		*bf2Ptr++ = 0x40;	// data follows - lower page
		while(*str){		// for every character in the string
			print9x15(*str++);
			if(mCol > 14){	// wrap text to the next line
				i2cPtr->write(0, address, bufr, bufPtr-bufr);
				i2cPtr->write(0, address, buf2, bf2Ptr-buf2);
				mRow = (mRow + 2) & 7;
				mCol = 0;
				break;
			}
		}
		if(*str)	continue;	// go back to the while(true);
		i2cPtr->write(0, address, bufr, bufPtr-bufr);	// the last few characters, <14
		i2cPtr->write(0, address, buf2, bf2Ptr-buf2);
		break;					// exit the  while(true) loop and returnt53  v vv 
	}
}

void OLED_GFX::print     (int row, int col, char *str, int sz){
	if(sz != 0)	printLarge(row, col, str);
	else		printSmall(row, col, str);
}

// functions added to support GFX character display on the ST7789 TFT display
// This allows Thai, English, or mixed characters to be displayed
// It also allows various font styles and sizes to be displayed

void OLED_GFX::bufferChar(uint8_t raw) {
	if( raw < fnt->first || raw >fnt->last ) return;// better might print error char
	uint8_t c = raw - fnt->first;					// set for GFX font bitmap range
	uint16_t h = fnt->glyph[c].height, w = fnt->glyph[c].width;	// character height
	for(uint16_t y=0; y<h && y<64; y++){			// scan the bits in the bitmap table
		for(uint16_t x=0; x<w; x++){				// for the width
			uint16_t bitNum = y*w+x;				// find the bit offset
			uint16_t index = fnt->glyph[c].bitmapOffset + (bitNum>>3);	// byte offset is bit offset >>3
			bool bit = fnt->bitmap[index] & (0x80 >> (bitNum & 7));	// state of bit at (x,y)
			uint16_t shift = fnt->glyph[c].yOffset + y + fnt->yAdvance/5*4;
			if(shift > maxY)	maxY = shift;
			if(shift < minY)	minY = shift;
			if(bit)									// if bit is set in the GFX bitmap, set the bit in the output buffer
				gfx_buffer[bufferLen + x + fnt->glyph[c].xOffset] |= 1ULL<<shift;
		}
	}
	bufferLen += fnt->glyph[c].xAdvance;			// advance the output buffer pointer
}

void OLED_GFX::printGFX(int row, int col, char *message){
	uint8_t *p = (uint8_t *)message;
	if(col > 0)		gCol = (col - 1) % 21;		// keep in the range 0-12 no matter what the user sends
	if(row > 0)		gRow = (row - 1) & 7;		// keep in the range 0-6 no matter what the user sends
	if(*p == 0)		return;						// a print with an empty string is just a set cursor function

	memset(gfx_buffer, 0, sizeof(gfx_buffer));	// clear the output buffer
	bufferPtr = 0; // this is the pointer to where the data to display starts
	bufferLen = 0;	// this is the pointer to where we start filling the buffer.
	minY = 32000;
	maxY = 0;

	// create a bit map from the text message and the font files 

	while(*p  && bufferLen < 128)	// stop if terminal null character or bitmap buffer near capacity
		if(*p == 0xe0 && (p[1] == 0xb8 || p[1] == 0xb9)){	// is it a Thai character?
			fnt = &thFont;	// switch to Thai characters	// switch to Thai GFX struct
			if(p[1] == 0xb9)	bufferChar(p[2] - 0x41);
			if(p[1] == 0xb8)	bufferChar(p[2] - 0x81);
			p += 3;
		}else{
			fnt = &enFont;	// switch to ASCII characters
			bufferChar(*p++);
		}

	// printf to the console for inspecting the bitmap generated by the text
	// help visualizing during development - then printf code can be removed or commented out
	printf("message width %d, minY %d, maxY %d\n", bufferLen, minY, maxY);
	for(int i=0; i<64; i++){								// print the output bitmap for testing
		for(int j=0; j<bufferLen && j<160; j++){			// unreadable if the line wraps, only print up to ? columns
			if(gfx_buffer[j] & (1ULL<<i)) printf("g");
			else printf("--");
		}
		printf("\n");
	}
	int nPages = (maxY + 7) >> 3;						// how many lines to display depends on the GFX font max height
	for(int page=0; page<nPages; page++){
		setCursor(gRow+page, gCol, 1);					// addresses  in the output puffers
		*bufPtr++ = 0x40;								// data follows
		for(int i=0; i<bufferLen && i<128; i++){
			*bufPtr++ = 0xff & (gfx_buffer[i] >> (page<<3)); // move bits from gfx buffer to display
		}
		i2cPtr->write(0, address, bufr, bufPtr-bufr);	// the last few characters, <14
	}
}

char * OLED_GFX::num2str(double val, uint8_t wid, uint8_t dig, uint8_t fmt){
	static char buf[40], *p; // buffer for results
	if( wid > sizeof(buf) - 1)	wid = sizeof(buf) - 1;
	switch(fmt){
		case 0:	// integer
			sprintf(buf, "%*ld", wid, (long)val);
			break;
		case 1: // hex
			sprintf(buf, "%*lX", wid, (long)val);
			break;
		case 2: // hex with leading 0
			sprintf(buf, "%0*lX", wid, (long)val);
			break;
		case 3: // fixed point
			sprintf(buf, "%*.*f", wid, dig, val);
			break;
		case 4: // exponential
			sprintf(buf, "%*.*E", wid, dig, val);
			break;
		default:
			p = buf;
			while(wid--)	*p++ = '?';
			*p = 0;
	}
	return buf;
}
